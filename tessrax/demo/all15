=== FILE: demo/quickstart_tmp1.py ===
"""
Tessrax Quickstart (TMP-1)
--------------------------
Minimal live loop proving contradiction metabolism end-to-end.
Run:  python demo/quickstart_tmp1.py
Expected: 3 sample claims processed ‚Üí ledger length printed.
"""

import hashlib, time

L = []  # in-memory ledger

def step(claim: str):
    """Process a single claim and return record."""
    stability = 1.0 - (len(claim) % 7) / 10.0
    route = ["autonomic","deliberative","constitutional","audit"][len(L) % 4]
    state = "ok" if stability > 0.5 else "unstable"
    record = {
        "claim": claim,
        "stability": stability,
        "route": route,
        "state": state,
        "hash": hashlib.sha256(f"{claim}{time.time()}".encode()).hexdigest()
    }
    L.append(record)
    return record

if __name__ == "__main__":
    print("\nüß†  Tessrax Minimal Protocol ‚Äî Live Demo\n")
    for c in ["system stable","not system stable","performance high"]:
        r = step(c)
        print(f"‚Üí {c}")
        print(f"   stability={r['stability']:.2f}, route={r['route']}, state={r['state']}")
        print(f"   hash={r['hash'][:16]}‚Ä¶\n")
    print("‚úÖ Ledger length:", len(L))
    print("Demo complete.\n")

=== FILE: demo/quickstart_tmp1.py (END) ===


=== FILE: demo/corporate_audit.py ===
"""
Corporate Pledge vs Outcome Auditor
-----------------------------------
Audits real-world contradiction between stated goals and outcomes.
Run:  python demo/corporate_audit.py
Outputs: extracted claims, detected contradiction, and visual summary.
"""

import re, json, hashlib, datetime
from graphviz import Digraph

def extract_claims(texts):
    claims = []
    for i, text in enumerate(texts, 1):
        subj = "Acme Corp" if "Acme" in text else "Unknown"
        pred = ("target" if "pledge" in text or "goal" in text else
                "actual" if "report" in text or "achieved" in text else "statement")
        num = re.search(r"(\d+(?:\.\d+)?)", text)
        val = float(num.group(1)) if num else None
        year = re.search(r"(20\d{2})", text)
        date = (year.group(1) if year else datetime.date.today().year)
        claims.append({
            "id": f"c{i}", "subject": subj, "predicate": pred,
            "value": val, "date": f"{date}-01-01", "text": text})
    return claims

def detect_contradiction(claims, tol=5.0):
    tgt = next((c for c in claims if c["predicate"]=="target"), None)
    act = next((c for c in claims if c["predicate"]=="actual"), None)
    if not (tgt and act and tgt["value"] and act["value"]): return None
    diff = abs(tgt["value"] - act["value"])
    if diff <= tol: return None
    bundle = {
        "description": f"Divergence {tgt['value']}%‚Üí{act['value']}%",
        "claims":[tgt["id"],act["id"]],
        "timestamp": datetime.datetime.utcnow().isoformat()}
    bundle["hash"]="sha256:"+hashlib.sha256(json.dumps(bundle,sort_keys=True).encode()).hexdigest()
    return bundle

def draw_graph(claims, contradiction, out="audit_graph"):
    g = Digraph("AuditMap",format="png")
    g.attr("node",shape="box",style="filled",color="lightgrey")
    for c in claims:
        g.node(c["id"],f"{c['date']}: {c['text']}")
    if contradiction:
        g.node("X",f"‚ùå {contradiction['description']}",color="red",shape="ellipse")
        for cid in contradiction["claims"]: g.edge(cid,"X")
    g.render(out,cleanup=True)
    print(f"[‚úì] Graph rendered ‚Üí {out}.png")

if __name__ == "__main__":
    statements = [
        "In 2020, Acme Corp pledged to cut CO‚ÇÇ emissions 50% by 2030.",
        "In 2024, Acme Corp reported CO‚ÇÇ emissions only down 5%.",
    ]
    claims = extract_claims(statements)
    contradiction = detect_contradiction(claims)
    print(json.dumps({"claims":claims,"contradiction":contradiction},indent=2))
    draw_graph(claims, contradiction)

=== FILE: demo/corporate_audit.py (END) ===


=== FILE: demo/agent_governance_demo.py ===
"""
Agent + Governance Kernel Integration Demo
------------------------------------------
Shows a full semantic‚Üígovernance‚Üíledger loop using mock kernel.
Run:  python demo/agent_governance_demo.py
"""

import json, datetime, time
from typing import Dict, Any

# --- Lightweight GovernanceKernel mock ---
class GovernanceKernel:
    def __init__(self): self.ledger=[]
    def append_event(self, e:Dict[str,Any]):
        e["timestamp"]=datetime.datetime.utcnow().isoformat()+"Z"
        self.ledger.append(e)
        print(f"ü™∂ Logged ‚Üí {e['event']}")

# --- Semantic Engine ---
class SimpleSemanticEngine:
    def analyze(self,text:str)->Dict[str,str]:
        t=text.lower()
        if "false" in t and "true" in t:
            return {"id":"contradiction","summary":"Direct logical contradiction"}
        if "false" in t: return {"id":"liar","summary":"Liar paradox"}
        if "set of all sets" in t: return {"id":"russell","summary":"Russell paradox"}
        return {"id":"ok","summary":"No contradiction"}

# --- Agent ---
class TessraxGovernanceAgent:
    def __init__(self,agent_id:str,engine:SimpleSemanticEngine,kernel:GovernanceKernel):
        self.agent_id=agent_id; self.engine=engine; self.kernel=kernel
        self.reports=[]
    def process_event(self,event:Dict[str,Any]):
        print(f"‚öôÔ∏è Processing {event['id']}")
        result=self.engine.analyze(json.dumps(event["payload"]))
        report={"event":"AGENT_ANALYSIS_REPORT","agent_id":self.agent_id,
                "source":event["id"],"analysis":result}
        self.reports.append(report)
        self.kernel.append_event(report)
    def summary(self)->Dict[str,Any]:
        return {"agent":self.agent_id,"reports":len(self.reports)}

if __name__=="__main__":
    print("\nüß† Starting Tessrax Agent + Governance Demo \n")
    kernel=GovernanceKernel(); engine=SimpleSemanticEngine()
    agent=TessraxGovernanceAgent("Agent-Alpha",engine,kernel)
    events=[{"id":"e1","payload":{"text":"This is true."}},
            {"id":"e2","payload":{"text":"This is false."}},
            {"id":"e3","payload":{"text":"Set of all sets that do not contain themselves."}}]
    for e in events: agent.process_event(e)
    print("\nüìä Agent Summary:\n",json.dumps(agent.summary(),indent=2))
    print("\nüìú Ledger Entries:\n",json.dumps(kernel.ledger,indent=2))
    print("\n‚úÖ Demo Complete.\n")

=== FILE: demo/agent_governance_demo.py (END) ===
=== FILE: demo/engine_showcase.py ===
"""
Tessrax Engine Showcase
-----------------------
Demonstrates metabolism adapter + contradiction engine + ledger integration.
Run:  python demo/engine_showcase.py
"""

import json, time
from contradiction_engine import ContradictionEngine
from metabolism_adapter import MetabolismAdapter
from governance_kernel import GovernanceKernel

if __name__ == "__main__":
    print("\n‚öôÔ∏è  Starting Tessrax Engine Showcase\n")

    ce = ContradictionEngine()
    ma = MetabolismAdapter()
    kernel = GovernanceKernel()

    samples = [
        ("Policy says transparent", "Policy redacts data", "Governance"),
        ("AI promises safety", "AI releases risky models", "Ethical"),
        ("Budget balanced", "Budget deficit reported", "Fiscal")
    ]

    for a, b, t in samples:
        contradiction = ce.analyze_pair(a, b, t)
        metab = ma.ingest(contradiction)
        kernel.evaluate_policy({"type": t, "payload": metab})
        time.sleep(0.3)

    print("\nüìä Engine Summary:")
    print(json.dumps(ce.summary(), indent=2))

    print("\nüìö Governance Ledger:")
    print(kernel.export_ledger())

    print("\n‚úÖ Engine Showcase complete.\n")

=== FILE: demo/engine_showcase.py (END) ===


=== FILE: demo/tests/test_engine.py ===
"""
Pytest Validation ‚Äî Tessrax Core Engine
Verifies ContradictionEngine + MetabolismAdapter + GovernanceKernel integration.
Run:  pytest demo/tests/test_engine.py -v
"""

import json
from contradiction_engine import ContradictionEngine
from metabolism_adapter import MetabolismAdapter
from governance_kernel import GovernanceKernel

def test_engine_pipeline():
    ce = ContradictionEngine()
    ma = MetabolismAdapter()
    gk = GovernanceKernel()

    c = ce.analyze_pair("X", "¬¨X", "Logical")
    e = ma.ingest(c)
    r = gk.evaluate_policy({"type":"Logical","payload":e})

    data = ce.summary()
    assert data["count"] == 1
    assert isinstance(r["hash"], str)
    assert gk.ledger and len(gk.ledger) == 1
    assert 0 <= data["avg_severity"] <= 1

=== FILE: demo/tests/test_engine.py (END) ===


=== FILE: demo/tests/test_regression.py ===
"""
Performance Regression Test ‚Äî CE-MOD-66 scaling check.
"""

import time
from contradiction_engine import ContradictionEngine

def test_performance_scaling():
    ce = ContradictionEngine()
    pairs = [(f"A{i}", f"B{i}", "Normative") for i in range(500)]
    t0 = time.time()
    for a,b,t in pairs:
        ce.analyze_pair(a,b,t)
    elapsed = time.time() - t0
    assert elapsed < 2.0, f"Regression: took {elapsed:.2f}s for 500 pairs"

=== FILE: demo/tests/test_regression.py (END) ===


=== FILE: demo/tests/test_integration.py ===
"""
End-to-End Integration Test
Simulates agent claims ‚Üí contradiction detection ‚Üí governance ledger logging.
"""

from contradiction_engine import ContradictionEngine
from governance_kernel import GovernanceKernel

def test_full_flow():
    ce = ContradictionEngine()
    gk = GovernanceKernel()

    pairs = [("Door open","Door closed","Physical")]
    for a,b,t in pairs:
        c = ce.analyze_pair(a,b,t)
        gk.evaluate_policy({"type":t,"payload":c})
    ledger = gk.ledger
    assert ledger and ledger[0]["approved"] in [True, False]
    assert ce.summary()["count"] == 1

=== FILE: demo/tests/test_integration.py (END) ===


=== FILE: demo/tests/test_concurrency.py ===
"""
Concurrency Stress Test ‚Äî ledger integrity under parallel writes.
"""

import concurrent.futures, json
from governance_kernel import GovernanceKernel
from contradiction_engine import ContradictionEngine

def _submit(idx):
    ce = ContradictionEngine()
    gk = GovernanceKernel()
    c = ce.analyze_pair(f"Claim{idx}", f"Opposite{idx}", "Async")
    gk.evaluate_policy({"type":"Async","payload":c})
    return gk.ledger[0]

def test_concurrent_submissions():
    with concurrent.futures.ThreadPoolExecutor(max_workers=8) as ex:
        results = list(ex.map(_submit, range(20)))
    ids = {r["id"] for r in results}
    assert len(ids) == len(results)

=== FILE: demo/tests/test_concurrency.py (END) ===


=== FILE: demo/tests/test_unit_ce_mod66.py ===
"""
Unit tests for CE-MOD-66
Covers: empty input, single pair, multiple pairs average severity.
"""

from contradiction_engine import ContradictionEngine

def test_empty():
    ce = ContradictionEngine()
    s = ce.summary()
    assert s["count"] == 0
    assert s["avg_severity"] == 0.0

def test_single():
    ce = ContradictionEngine()
    ce.analyze_pair("A","B","Logical")
    s = ce.summary()
    assert s["count"] == 1

def test_average():
    ce = ContradictionEngine()
    for _ in range(10):
        ce.analyze_pair("A","B","Normative")
    s = ce.summary()
    assert 0 < s["avg_severity"] < 1

=== FILE: demo/tests/test_unit_ce_mod66.py (END) ===
=== FILE: demo/tests/test_harness_summary.py ===
"""
Tessrax Demo Harness ‚Äî Quick Aggregator
---------------------------------------
Runs all demo test suites in sequence and prints a concise summary.
Run:  python -m demo.tests.test_harness_summary
"""

import importlib, pkgutil, sys, traceback

def main():
    print("\nüß©  Tessrax Demo Harness Initiated\n")
    package = "demo.tests"
    failures = 0
    for modinfo in pkgutil.iter_modules([package.replace(".", "/")]):
        if not modinfo.name.startswith("test_"):
            continue
        modname = f"{package}.{modinfo.name}"
        print(f"‚ñ∂  Running {modname}")
        try:
            mod = importlib.import_module(modname)
            if hasattr(mod, "main"): mod.main()
        except Exception as e:
            failures += 1
            print(f"‚ùå  {modname} failed\n{traceback.format_exc(limit=1)}")
    print("\nüìà  Summary: ", "All tests passed ‚úÖ" if failures==0 else f"{failures} failed ‚ùå")
    print("\nHarness complete.\n")

if __name__ == "__main__":
    sys.exit(main())

=== FILE: demo/tests/test_harness_summary.py (END) ===


=== FILE: demo/README_demo.md ===
# Tessrax Demonstration Suite

Welcome to the **Tessrax Demonstration Stack**, a guided tour through the core engines of the Tessrax framework.

---

## üì¶ Structure

| File | Purpose |
|------|----------|
| `demo/quickstart_tmp1.py` | Minimal loop showing contradiction metabolism. |
| `demo/corporate_audit.py` | Real-world contradiction example (pledge vs outcome). |
| `demo/agent_governance_demo.py` | Semantic ‚Üí Governance ‚Üí Ledger integration. |
| `demo/engine_showcase.py` | Full engine fusion (contradiction + metabolism + governance). |
| `demo/tests/‚Ä¶` | Pytest suites verifying logic, regression, and concurrency. |
| `demo/tests/test_harness_summary.py` | Aggregator running all tests at once. |

---

## üöÄ Quickstart

```bash
# Run the minimal live loop
python demo/quickstart_tmp1.py

# Or execute the full showcase
python demo/engine_showcase.py

# Validate everything
pytest demo/tests -v


‚∏ª

üß† Concept

Tessrax treats contradictions not as failures but as metabolic fuel for governance systems.
Each demo exposes one layer of that metabolism:
	1.	Perception ‚Äî detect conflict (ContradictionEngine)
	2.	Metabolism ‚Äî normalize and assign entropy (MetabolismAdapter)
	3.	Governance ‚Äî evaluate and record via quorum (GovernanceKernel)
	4.	Trust ‚Äî visualize, verify, and disclose (Dashboard, WorldReceiptProtocol)

‚∏ª

ü™∂ Notes
¬†¬†¬†‚Ä¢¬†¬†¬†All demos use lightweight, dependency-free Python 3.11+ (except optional graphviz for the audit diagram).
¬†¬†¬†‚Ä¢¬†¬†¬†The design emphasizes readability and modularity‚Äîideal for interview walk-throughs or teaching contradiction metabolism.
¬†¬†¬†‚Ä¢¬†¬†¬†Every JSON export is ledger-ready and hash-chained for authenticity.

‚∏ª

üìö Attribution

Built by Josh Scott Vetos
Tessrax LLC ‚Äî Metabolizing Contradictions Since 2024


