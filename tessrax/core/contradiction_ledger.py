# tessrax/core/contradiction_ledger.py
# Tessrax Contradiction Ledger â€” v1.0
# Author: Joshua Vetos / Generated by GPT-5
# License: CC BY 4.0

from datetime import datetime
from pathlib import Path
import hashlib, json
from typing import Dict, Any, List, Optional

from tessrax.core.ledger import SQLiteLedger


class ContradictionLedger:
    """
    High-level semantic layer built on top of SQLiteLedger.
    Records contradictions, their lineage, and resolution state
    into an immutable Merkle-linked ledger.
    """

    def __init__(self, db_path: Path = Path("data/contradiction_ledger.db")):
        self.db_path = Path(db_path)
        self.ledger = SQLiteLedger(self.db_path)

    # ----------------------------------------------------
    # Core methods
    # ----------------------------------------------------

    def record_contradiction(
        self,
        claim_a: Dict[str, Any],
        claim_b: Dict[str, Any],
        resolution: Optional[str] = None,
        metadata: Optional[Dict[str, Any]] = None,
    ) -> Dict[str, Any]:
        """
        Create and append a contradiction bundle.
        Returns the full receipt dict.
        """
        bundle = {
            "timestamp": datetime.utcnow().isoformat(),
            "claims": {"a": claim_a, "b": claim_b},
            "resolution": resolution or "unresolved",
            "metadata": metadata or {},
        }

        bundle_json = json.dumps(bundle, sort_keys=True)
        bundle_hash = hashlib.sha256(bundle_json.encode()).hexdigest()

        receipt = {
            "receipt_id": f"rcpt_{bundle_hash[:10]}",
            "bundle_hash": bundle_hash,
            "bundle": bundle,
            "ledger_root": self.ledger.merkle_root(),
        }

        self.ledger.add_event(receipt)
        return receipt

    def get_history(self) -> List[Dict[str, Any]]:
        """Return full contradiction history (verified)."""
        return self.ledger.get_all_events(verify=True)

    def verify_chain(self) -> bool:
        """Run Merkle-chain verification on underlying ledger."""
        return self.ledger.verify_chain()

    def close(self) -> None:
        """Close database connection."""
        self.ledger.close()


# --------------------------------------------------------
# Example usage (for manual testing)
# --------------------------------------------------------
if __name__ == "__main__":
    ledger = ContradictionLedger()

    claim1 = {"id": "c1", "text": "Acme pledges 50% reduction by 2030", "value": 50}
    claim2 = {"id": "c2", "text": "Acme reports 5% reduction by 2024", "value": 5}

    receipt = ledger.record_contradiction(
        claim1, claim2, resolution="Outcome diverges from pledge"
    )

    print(json.dumps(receipt, indent=2))
    ledger.close()