# =========================
# Batch 4 â€” Tessrax v1.0
# =========================

# docs/v1.0_release.md
# --------------------
# Tessrax v1.0 Release Notes

## Core Primitives
- **Receipts**: Tamper-evident, hash-chained records of execution.
- **Ledger**: Append-only log with Merkle root anchoring.
- **Anchoring**: Anchors ledger roots to `anchors.txt` and optional external notary.
- **Memory**: Contradiction-aware memory with provenance tracking.
- **Sandbox**: Deterministic, resource-limited execution with syscall filtering.
- **Quorum**: Threshold multi-signature receipts for governance decisions.
- **Revocation**: Signer revocation list enforcement.
- **Federation**: Multi-node simulation with broadcast, quorum, and cache scrub.

## Governance Rules
- Quorum thresholds defined in `charter/` must be satisfied for governance changes.
- Revoked signers are treated as untrusted; their receipts are flagged.
- Anchors must be updated after ledger changes.
- Compliance disclaimer must be acknowledged before accessing auditor mode.

## Compliance Disclaimers
- **Legal Disclaimer**: Tessrax is a prototype; no warranty of fitness for production.
- **Compliance Checklist**: Auditors must verify anchors, receipts, and revocation lists.
- **Operational Policies**: Nodes must rotate keys, scrub caches, and document governance actions.

---

# compliance/legal_disclaimer.txt
# -------------------------------
Tessrax is provided as a prototype system for research and demonstration purposes.
It is not intended for production use. No warranty, express or implied, is provided.
Users are responsible for ensuring compliance with applicable laws and regulations.

---

# compliance/compliance_checklist.md
# ----------------------------------
# Compliance Checklist

Auditors should perform the following steps:

1. Verify that all receipts validate against their signatures.
2. Confirm that revoked signers listed in `keys/revoked.json` are flagged.
3. Recompute ledger Merkle root and compare with anchors in `anchors.txt`.
4. Ensure quorum receipts meet charter thresholds.
5. Review cache scrub confirmations across nodes.
6. Confirm operational policies (key rotation, anchoring, documentation) are followed.

---

# compliance/operational_policies.md
# ----------------------------------
# Operational Policies

- **Key Management**: Rotate signer keys regularly; update `revoked.json` for compromised keys.
- **Anchoring**: Anchor ledger roots after significant changes and push to repository.
- **Cache Scrubbing**: Perform scrubs periodically and confirm with signed receipts.
- **Documentation**: Maintain runbooks, onboarding guides, and charter updates.
- **Auditing**: Run `ledger_replay.py` and compliance checklist before releases.

---

# tests/test_docs_integrity.py
# ----------------------------
from pathlib import Path
import pytest

DOCS = [
    Path("docs/v1.0_release.md"),
    Path("compliance/legal_disclaimer.txt"),
    Path("compliance/compliance_checklist.md"),
    Path("compliance/operational_policies.md"),
]

@pytest.mark.parametrize("path", DOCS)
def test_doc_files_exist_and_nonempty(path):
    assert path.exists(), f"{path} should exist"
    text = path.read_text().strip()
    assert text, f"{path} should not be empty"